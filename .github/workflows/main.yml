name: Deploy Go HTMX App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.22"

      - name: Build Docker image
        run: docker build -t gomex:latest .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          docker tag gomex:latest nspielman/gomex:latest
          docker push nspielman/gomex:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install cloudflared
        run: |
          curl -L https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-archive-keyring.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt update
          sudo apt-get install -y cloudflared

      - name: Test cloudflared installation
        run: |
          which cloudflared
          whereis cloudflared
          cloudflared --version

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Deploy to Ubuntu VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }} # tosterhoaster
          TUNNEL_HOSTNAME: ${{ secrets.TUNNEL_HOSTNAME }} # p.birdlaw.uk
          EDGEDB_INSTANCE: ${{ secrets.EDGEDB_INSTANCE }}
          EDGEDB_SECRET_KEY: ${{ secrets.EDGEDB_SECRET_KEY }}
          CLOUDFLARE_CERT: ${{ secrets.CLOUDFLARE_CERT }}
          CLOUDFLARE_ACCESS_TOKEN: ${{ secrets.CLOUDFLARE_ACCESS_TOKEN }}

        run: |
          # Start SSH agent and add the private key
          eval "$(ssh-agent -s)"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

          # Set up known_hosts and cloudflare certificate
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Debugging: Check the values of environment variables
          echo "SSH_USER: $SSH_USER" | tee -a /tmp/debug.log
          echo "TUNNEL_HOSTNAME: $TUNNEL_HOSTNAME" | tee -a /tmp/debug.log

          # Additional Debugging: Resolve the hostname
          echo "Resolving SSH_HOST:" | tee -a /tmp/debug.log
          nslookup "$TUNNEL_HOSTNAME" | tee -a /tmp/debug.log

          mkdir -p ~/.cloudflare
          echo "$CLOUDFLARE_CERT" > ~/.cloudflare/cert.pem

          # Use cloudflared to establish the connection and deploy the application
          ssh -o "ProxyCommand=cloudflared access ssh --hostname $TUNNEL_HOSTNAME --header CF-Access-Token:$CLOUDFLARE_ACCESS_TOKEN" $SSH_USER@$TUNNEL_HOSTNAME << 'EOF'
            set -x  # Enable script debugging
            docker pull nspielman/gomex:latest
            docker stop gomex || true
            docker rm gomex || true
            docker run -d --name gomex -p 80:80 \
              nspielman/gomex:latest
            export EDGEDB_INSTANCE="$EDGEDB_INSTANCE"
            export EDGEDB_SECRET_KEY="$EDGEDB_SECRET_KEY"
            export GO_ENV=production
            export PORT=80
          EOF
